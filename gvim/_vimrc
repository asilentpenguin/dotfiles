
" source $VIMRUNTIME/defaults.vim
" source $VIMRUNTIME/mswin.vim



" Plugins: vim-plug
call plug#begin()

" sessions / projects
Plug 'tpope/vim-obsession'
" Plug 'mhinz/vim-startify'

" very nice file browser
Plug 'scrooloose/nerdtree'
let g:NERDTreeCopyCmd="cp -r"

Plug 'vim-scripts/nerdtree-ack'
Plug 'mileszs/ack.vim'
let g:ackprg='rg -H --no-heading --vimgrep'
" let g:ackprg='ag --vimgrep'

" comments
Plug 'tomtom/tcomment_vim'
" Plug 'tpope/vim-commentary'

" ...
Plug 'jiangmiao/auto-pairs'

"
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

"
" Plug 'vim-scripts/matchit.zip'

" snippets
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
" snippets - optional:
Plug 'honza/vim-snippets'

"
Plug 'mihaifm/bufstop'
" call BufstopSpeedToggle()
au GUIEnter * call BufstopSpeedToggle()

"
" Plug 'moll/vim-bbye'

" ...
Plug 'bkad/camelcasemotion'

" ...
Plug 'terryma/vim-multiple-cursors'

" ...
" Plugin 'qpkorr/vim-bufkill'

" full path fuzzy search
Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_working_path_mode = 'wra'
let g:ctrlp_prompt_mappings = { 'PrtAdd("/")': ['<space>'], 'PrtAdd(" ")': ['/'] }
let g:ctrlp_root_markers = [ 'dist.git' ]

Plug 'FelikZ/ctrlp-py-matcher'
" let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

" The Silver Searcher
" if executable('ag')
" ripgrep
if executable('rg')
	" Use ag over grep
	" set grepprg=ag\ --nogroup\ --nocolor
	set grepprg=rg\ -H\ --no-heading\ --vimgrep
	" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
	" let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'
	let g:ctrlp_user_command = 'rg --files %s'
	" ag is fast enough that CtrlP doesn't need to cache
	" let g:ctrlp_use_caching = 0
	let g:ctrlp_clear_cache_on_exit = 0
endif

Plug 'mhinz/vim-grepper'
" runtime plugin/grepper.vim
let g:grepper = {}
let g:grepper.tools = ['rg', 'ag', 'ack', 'grep', 'findstr', 'git']
let g:grepper.next_tool = '<leader>g'
nmap gs  <plug>(GrepperOperator)
xmap gs  <plug>(GrepperOperator)
" let g:grepper = {
" 		\ 'ag': {
" 		\ 	'grepprg':	'ag --vimgrep --'
" 		\ }}


" ...
Plug 'KabbAmine/zeavim.vim', {'on': [
		\	'Zeavim', 'Docset',
		\	'<Plug>Zeavim',
		\	'<Plug>ZVVisSelection',
		\	'<Plug>ZVKeyDocset',
		\	'<Plug>ZVMotion'
		\ ]}
let g:zv_zeal_executable = 'd:/usr/zeal/zeal.exe'
let g:zv_docsets_dir = 'd:/usr/zeal/docsets/'

" ...
" Plug 'vim-scripts/phpfolding.vim'

" ...
Plug 'godlygeek/tabular'

"
Plug 'jeetsukumaran/vim-markology'
let g:markology_enable = 0
" Plug 'vim-scripts/ShowMarks' " tried it: less configurable, (console) errors

" ...
Plug 'plasticboy/vim-markdown'
"
Plug 'vim-scripts/sql.vim--Stinson'
"
Plug 'rodjek/vim-puppet'
"
Plug 'chr4/nginx.vim'

"
Plug 'maksimr/vim-jsbeautify'


" Plug 'tpope/vim-fugitive' # can be very slow
" Plug 'junegunn/gv.vim'

"
Plug 'chrisbra/recover.vim'

"
Plug 'sjl/gundo.vim'

"
Plug 'tyru/open-browser.vim'
nmap <C-Cr> <Plug>(openbrowser-open)

"
" Plug 'blueyed/vim-qf_resize'

" status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme = 'powerlineish'
" let g:airline_theme = 'solarized'
" let g:airline_theme = 'papercolor'
let g:airline_powerline_fonts = 1
let g:airline_mode_map = {
		\ '__' : '-',
		\ 'n'  : 'N',
		\ 'i'  : 'I',
		\ 'R'  : 'R',
		\ 'c'  : 'C',
		\ 'v'  : 'V',
		\ 'V'  : 'V-L',
		\ '' : 'V-B',
		\ 's'  : 'S',
		\ 'S'  : 'S',
		\ '' : 'S',
		\ }
let g:airline_section_b = '%{winnr()}'
let g:airline_inactive_collapse=0

" one colorscheme pack to rule them all!
Plug 'flazz/vim-colorschemes'
" Plug 'lifepillar/vim-solarized8'

" ...
Plug 'felixhummel/setcolors.vim'

" Plug 'vim-scripts/HJKL'
" Plug 'mmisono/snake.vim'
" Plug 'uguu-org/vim-matrix-screensaver'

" Initialize Plug system
call plug#end()




"
set number

set tabstop=2
set shiftwidth=2

set autoread

set undodir=~/.vim.gvim/.undo//
set backupdir=~/.vim.gvim/.backup//
set dir=~/.vim.gvim/.swap//

set shellslash

set ignorecase

set hlsearch
set incsearch

set encoding=utf-8
set fileformats=unix,dos
",mac ?

if &history < 10000
	set history=10000
endif

set laststatus=2

set wildmenu

" set listchars=eol:⏎,tab:▸\ ,trail:·,nbsp:·
set listchars=eol:⏎,tab:»\ ,trail:·,nbsp:·
" set listchars=eol:▾↔╝╖ⱶ‖,tab:»␣·,trail:·,nbsp:·

set list

set scrolloff=6

" set fillchars=vert:\|,fold:-,stlnc:_

set cursorline

set splitbelow
set splitright

set completeopt+=menuone

set hidden

set title

function! LoadSession()
	let g:LoadSessionFilePath = fnamemodify(input('Session file: ', '~/Documents/editor.sessions/vim/', 'file'), ':p')
	set titlestring=%{fnamemodify(g:LoadSessionFilePath,\":t:r\")}:\ %t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
	exec 'source ' . g:LoadSessionFilePath
endfunction
command! LoadSession call LoadSession()


set showtabline=2

"
set tags=./.tags-y;,./.git/tags-y

"
let mapleader=" "
" let mapleader="\\"


augroup PHP
	" Clear all autocmd's in this group before running them again
	autocmd!

	" autocomplete
	autocmd FileType php set omnifunc=phpcomplete#CompletePHP

	" Check for PHP syntax errors after saving a file
	" autocmd BufWritePost {*.php} echom system("php -l ".expand('%'))

augroup END

" quickfix is always bottom, on its own 'row'
autocmd filetype qf wincmd J
" Quickfix - alternative to <CR>
autocmd FileType qf nmap <buffer> o :let g:MyQfLine = line('.')<CR>:wincmd p<CR>:exe("cc " . g:MyQfLine)<CR>


"
inoremap jk <Esc>

" save
nnoremap <C-s> :w<CR>
nnoremap <CR> :w<CR>
inoremap <C-s> <Esc>:w<CR>a

" comment
nnoremap <Leader>q :TComment<CR>
vnoremap <Leader>q :TComment<CR>
" nnoremap <Leader>q :Commentary<CR>
" vnoremap <Leader>q :Commentary<CR>

"
nnoremap <leader>g :Grepper<cr>

" move line(s)
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

"
map <C-j> <C-w><C-j>
map <C-k> <C-w><C-k>
map <C-l> <C-w><C-l>
map <C-h> <C-w><C-h>
nmap <Leader>r <C-w>p

"
nmap <silent> <A-1> :setlocal foldlevel=0<CR>
nmap <silent> <A-2> :setlocal foldlevel=1<CR>
nmap <silent> <A-3> :setlocal foldlevel=2<CR>
nmap <silent> <A-4> :setlocal foldlevel=3<CR>
nmap <silent> <A-5> :setlocal foldlevel=4<CR>
nmap <silent> <A-6> :setlocal foldlevel=5<CR>
nmap <silent> <A-7> :setlocal foldlevel=6<CR>
nmap <silent> <A-8> :setlocal foldlevel=7<CR>
nmap <silent> <A-9> :setlocal foldlevel=8<CR>
nmap <silent> <A-0> :setlocal foldlevel=99<CR>

nmap <Leader>pf <Esc>:EnableFastPHPFolds<CR>
nmap <Leader>pF <Esc>:EnablePHPFolds<CR>
nmap <Leader>pdf <Esc>:DisableFastPHPFolds<CR>

"
" nnoremap <silent> <c-w>= :wincmd =<cr>:QfResizeWindows<cr>

"
vnoremap // y/<C-R>"<CR>

"
vnoremap < <gv
vnoremap > >gv

"
nnoremap <silent> <C-S-tab> :tabprevious<CR>
nnoremap <silent> tp :tabprevious<CR>
nnoremap <silent> <C-tab> :tabnext<CR>
nnoremap <silent> tn :tabnext<CR>
let g:lasttab = 1 | nmap <silent> <Leader>a :exe "tabn ".g:lasttab<CR> | au TabLeave * let g:lasttab = tabpagenr()

"
map <silent> <Leader>l :redraw!<CR>

"
map <silent> <Leader>t :NERDTreeToggle<CR>
map <silent> <Leader>T :NERDTreeFind<CR>

"
nmap <Leader>d yyP
vmap <Leader>d yP

"
nmap <silent> <Leader>` <C-^>
"
" ; use `exe` to prevent trailing whitespace
exe "nmap <silent> <Leader><Tab> :ls<CR>:b "
nmap <silent> <Leader>b :BufstopFast<CR>

"
map <silent> <Leader>w <Plug>CamelCaseMotion_w
map <silent> <Leader>B <Plug>CamelCaseMotion_b

"
nnoremap <silent> <Space> :noh<CR>:<backspace>

" Copy file path to system clipboard
nnoremap <Leader>cp :let @+=expand("%:p")<CR>

" Switch &shell: cmd|bash
nnoremap <silent> <Leader>s :let &shell=eval("(&shell == 'cmd' ? 'bash' : 'cmd')")<CR>

:nnoremap <silent> <F7> "=strftime("%A, %B %d, %Y, %H:%M") . printf(" - %.2f%%", str2float(strftime("%j")) / 365 * 100)<CR>P
:inoremap <silent> <F7> <C-r>=strftime("%A, %B %d, %Y, %H:%M") . printf(" - %.2f%%", str2float(strftime("%j")) / 365 * 100)<CR>

" F5 in command-line window: run and return to the same line
autocmd CmdwinEnter * nnoremap <buffer> <F5> :let g:CmdWindowLineMark=line(".")<CR><CR>q::execute "normal ".g:CmdWindowLineMark."G"<CR>

" " Automatically save the current session whenever vim is closed
" autocmd VimLeave * mksession! ~/.vim/shutdown_session.vim
" noremap <F7> :source ~/.vim/shutdown_session.vim<CR>
" " " autocmd VimEnter * :source ~/.vim/shutdown_session.vim

" Reload changes to .vimrc automatically
" autocmd BufWritePost  ~/_vimrc source ~/_vimrc



" looks

" diacritics test: Să vezi și să nu crezi, îți spun întâi / Șah îți dă întâi șui

" set guifont=DejaVu_Sans_Mono_for_Powerline:h10
set guifont=Anonymice_Powerline:h11

" set guifont=Consolas:h10

set linespace=0
" set linespace=-1


" Removes the menubar.
set guioptions -=m
" Removes the toolbar.
set guioptions -=T
" Removes the left+right-hand scroll bars
set guioptions -=L
set guioptions -=r
" Use text drawing for tabs
set guioptions-=e

colorscheme anderson
hi SpecialKey guifg=#333333 guibg=#262422
" colorscheme PaperColor
" colorscheme molokai
" colorscheme solarized8_dark_high

" start maximized
au GUIEnter * simalt ~x


if filereadable(expand("$VIM/_vimrc"))
	so $VIM/_vimrc
endif


" secondary _vimrc
" [https://github.com/derekmcloughlin/gvimfullscreen_win32]: copy gvimfullscreen.dll to the directory that has gvim.exe
map <F11> <Esc>:call libcallnr("gvimfullscreen_64.dll", "ToggleFullScreen", 0)<CR>
" / secondary _vimrc

" not working
" if has('gui_running')
" 	call libcallnr("gvimfullscreen_64.dll", "ToggleFullScreen", 0)
" endif

